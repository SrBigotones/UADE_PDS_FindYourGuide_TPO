@startuml TPO


''**********************************************CAPA ENTIDADES**********************************************

abstract class Usuario{
    - nombre: String
    - apellido: String
    - sexo: String
    - dni: String
    - email: String
    - numTelefono: String
    - imgPerfil: String
    ''Nombre del archivo, planificar ubicar la imagen en un servidor publico'
}

class UsuarioGuia extends Usuario{
    - listaCiudadActivo: Set<CiudadPais>
    - listaServicios: Set<ServicioUsuarioGuia>

    + agregarServicio(ServicioUsuarioGuia)
    + eliminarServicio(ServicioUsuarioGuia)
}
UsuarioGuia *--> ServicioUsuarioGuia
UsuarioGuia o-> CiudadPais

class UsuarioTurista extends Usuario{
}

abstract class ServicioUsuarioGuia{
    - precio: double
    ''ver como aplica en las traducciones, si cobra tarifa por hora/dia/archivo/precio base
    - nombre: String
    - descripcion: String
}

abstract class Tour extends ServicioUsuarioGuia{
    - ciudad: Ciudad
}

class TourIndividual extends Tour{}

class TourGrupal extends Tour{
    - cantPersonas: int
}

class Traduccion extends ServicioUsuarioGuia{
    - idiomaOriginal: Idioma
    - idiomaDestino: Idioma
}

Traduccion *--> Idioma


class CiudadPais{
    - id: long
    - ciudad: String
    - pais: String
}


class Contrato{
    - servicio: Servicio
    - usuarioContratante: UsuarioTurista
    - usuarioContratado: UsuarioGuia
    - fechaIni: Date
    - fechaFin: Date
    - importe: Double
    - estado: IStateContrato


    - cambiarEstado(IStateContrato)
}

class Review{
    - usuarioTurista: UsuarioTurista
    - usuarioGuia: UsuarioGuia
    - servicioContratado: ServicioUsuarioGuia
    - calificacion: int 
    ''del 1 al 10
    - comentario: String
}

interface INotificacion{
    + notificar(UsuarioDestino, mensaje)
}

interface ISistemaPago{
    + cobrar()
    + transferir()
    + depositar()
}
interface IStateContrato{
    + pagar(Contrato)
    + cancelar(Contrato)
    + aprobar(Contrato)
    + realizarReserva(Contrato)
}

class StateContratoReserva implements IStateContrato{}
class StateContratoAceptado implements IStateContrato{}
class StateContratoConcluido implements IStateContrato{}
class StateContratoCancelado implements IStateContrato{}


''**********************************************CAPA ENUMS**********************************************

enum Idioma{
    ESPANOL
    INGLES
    FRANCES
    ITALIANO
    ALEMAN
    GUARANI
    ETC...
}

enum TipoUsuario{
    GUIA
    TURISTA
}


''**********************************************CAPA DTO**********************************************

class EstadoVerificacionDTO{
    - email: String
    - estado: Boolean
}

class RegistroDTO{
    ''Ver con el profe, tiene sentido meter todo en un solo DTO? Dejamos la responsabilidad de tomar los campos que valen en la implementacion concreta del adapter?
    ''En el caso de Guia, la verificacion, los datos de imagen y num de certificado, lo agregamos a este dto o lo separamos?
    - email: String
    - passwd: String
    - apiServicio: String
    - tipoUsuario: TipoUsuario
    - acreditacion: String
    - imgCredencial: String
}

class FiltroDTO{
    - paisCiudad: List<CiudadPais>
    - nombre: String
    - apellido: String
    - idiomas: List<Idioma>
    - servicios: List<Servicio>
    - puntacion: int
}

ServicioRegistro ..> IVerificacionGuia
ServicioRegistro ..> IMetodoRegistroAdapter
ControladorRegistro *-> ServicioRegistro


interface IMetodoRegistroAdapter{

    + registrar(RegistroDTO)
}

class AdapterRegistroGoogle implements IMetodoRegistroAdapter{
    - adaptada: AdaptadaRegistroGoogle
}
class AdapterRegistroApple implements IMetodoRegistroAdapter{
    - adaptada: AdaptadaRegistroApple
}
class AdapterRegistroFacebook implements IMetodoRegistroAdapter{
    - adaptada: AdaptadaRegistroFacebook
}


ControladorRegistro o--> RegistroDTO


interface IVerificacionGuia{
    + verificar(VerificaGuiaDTO)
}

class VerificacionIA implements IVerificacionGuia{
    - apiConcreta: AdaptadaVerificacionIA

    + verificar(VerificaGuiaDTO)
}


''No se donde poner esto por el momento :v
''Sabemos que son diferentes API para los diferentes metoods, asique seguro nos va a estar pidiendo implentar patron Adapter


Contrato o-> IStateContrato
ControladorContrato ..> Contrato

StateContratoReserva ..> StateContratoCancelado
StateContratoReserva ..> StateContratoAceptado
StateContratoAceptado ..> StateContratoConcluido
StateContratoAceptado ..> StateContratoCancelado

''**********************************************CAPA REPOSITORIOS**********************************************

interface IRepository{
    + save(A)
    + update(A)
    + delete(long)
    + get(long)
}

class RepositoryUsuarioGuia implements IRepository{

}

class RepositoryUsuarioTurista implements IRepository{

}

class RepositoryContrato implements IRepository{

}

class RepositoryCiudadPais implements IRepository{

}

class RepositoryTraduccion implements IRepository{

}

class RepositoryServicioUsuarioGuia implements IRepository{

}

class RepositoryReview implements IRepository{

}

class RepositoryPago implements IRepository{

}


''**********************************************CAPA CONTROLADOR**********************************************
class ControladorContrato{
    + contratarTourGuia(ContratoTourDTO)
    + contratarTraduccionGuia(ContratoTraduccionDTO)

    + cancelarReserva(ReservaDTO)
}
'Estos metodos capas tiene mas sentido meterlos todo en un solo controlador por ejemplo: ControladorUsuarioTurista
class ControladorUsuarioGuia{
    - servicioUsuarioGuia: ServicioUsuarioGuia
    + buscarGuia(long): GuiaDTO
    + buscarGuias(FiltroDTO): List<UsuarioGuia>
}

ControladorUsuarioGuia o-> FiltroDTO

''Ver si los contraladores usamos singleton
class ControladorRegistro{
    - servicioRegistro: ServicioRegistro

    + registro(RegistroDTO) ''POST
}
ControladorRegistro o-> ServicioRegistro

class ControladorIA{
    ''PREGUNTAR AL PROFE!!!
    + confirmarVerificacion(EstadoVerificacionDTO)
    - enviarPush(EstadoVerificacionDTO)
    ''Cola de mensajes, no sabemos etapa de tiempo
}

class ControladorPago{
    - servicioPago: ServicioPago
}

ControladorPago o-> ServicioPago



''**********************************************CAPA SERVICIOS**********************************************
class ServicioRegistro{
    - verificacionGuia: IVerificacionGuia

    + registrar(RegistroDTO)
    + verificarGuia(RegistroDTO)
}

class ServicioUsuarioGuia{

}

class ServicioRegistro{

}

class ServicioUsuarioTurista{

}

class ServicioContrato{

}

class ServicioServicio{
}

class ServicioPago{

}


@enduml