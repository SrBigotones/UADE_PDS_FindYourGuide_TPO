@startuml TPO


''**********************************************CAPA ENTIDADES**********************************************

abstract class Usuario{
    - nombre: String
    - apellido: String
    - sexo: String
    - dni: String
    - email: String
    - numTelefono: String
    - imgPerfil: String
    ''Nombre del archivo, planificar ubicar la imagen en un servidor publico'
}

class UsuarioGuia extends Usuario{
    - listaCiudadActivo: Set<CiudadPais>
    - listaServicios: Set<ServicioGuia>

    + agregarServicio(ServicioGuia)
    + eliminarServicio(ServicioGuia)
}
UsuarioGuia *--> ServicioGuia
UsuarioGuia o-> CiudadPais

class UsuarioTurista extends Usuario{
}

abstract class ServicioGuia{
    - precio: double
    ''ver como aplica en las traducciones, si cobra tarifa por hora/dia/archivo/precio base
    - nombre: String
    - descripcion: String
}

abstract class Tour extends ServicioGuia{
    - ciudad: Ciudad
}

class TourIndividual extends Tour{}

class TourGrupal extends Tour{
    - cantPersonas: int
}

class Traduccion extends ServicioGuia{
    - idiomaOriginal: Idioma
    - idiomaDestino: Idioma
}
Traduccion *--> Idioma


class CiudadPais{
    - id: long
    - ciudad: String
    - pais: String
}


class Contrato{
    - servicio: Servicio
    - usuarioContratante: UsuarioTurista
    - usuarioContratado: UsuarioGuia
    - fechaIni: Date
    - fechaFin: Date
    - importe: Double
    - estado: IStateContrato


    - cambiarEstado(IStateContrato)
}
Contrato o-> IStateContrato

class Review{
    - usuarioTurista: UsuarioTurista
    - usuarioGuia: UsuarioGuia
    - servicioContratado: ServicioGuia
    - calificacion: int 
    ''del 1 al 10
    - comentario: String
}
Review *-> UsuarioTurista
Review *-> UsuarioGuia
Review *-> ServicioGuia

interface INotificacion{
    + notificar(UsuarioDestino, mensaje)
}

interface ISistemaPago{
    + cobrar()
    + transferir()
    + depositar()
}
interface IStateContrato{
    + pagar(Contrato)
    + cancelar(Contrato)
    + aprobar(Contrato)
    + realizarReserva(Contrato)
}

class StateContratoReserva implements IStateContrato{}
class StateContratoAceptado implements IStateContrato{}
class StateContratoConcluido implements IStateContrato{}
class StateContratoCancelado implements IStateContrato{}
StateContratoReserva ..> StateContratoCancelado
StateContratoReserva ..> StateContratoAceptado
StateContratoAceptado ..> StateContratoConcluido
StateContratoAceptado ..> StateContratoCancelado


class Pago{

    - id: long
    - monto: double
    - estado: String
}

''**********************************************CAPA ENUMS**********************************************

enum Idioma{
    ESPANOL
    INGLES
    FRANCES
    ITALIANO
    ALEMAN
    GUARANI
    ETC...
}

enum TipoUsuario{
    GUIA
    TURISTA
}


''**********************************************CAPA DTO**********************************************

class EstadoVerificacionDTO{
    - email: String
    - estado: Boolean
}

class RegistroDTO{
    ''Ver con el profe, tiene sentido meter todo en un solo DTO? Dejamos la responsabilidad de tomar los campos que valen en la implementacion concreta del adapter?
    ''En el caso de Guia, la verificacion, los datos de imagen y num de certificado, lo agregamos a este dto o lo separamos?
    - email: String
    - passwd: String
    - apiServicio: String
    - tipoUsuario: TipoUsuario
    - acreditacion: String
    - imgCredencial: String
}
RegistroDTO .. TipoUsuario

class FiltroDTO{
    - paisCiudad: List<CiudadPais>
    - nombre: String
    - apellido: String
    - idiomas: List<Idioma>
    - servicios: List<Servicio>
    - puntacion: int
}





interface IMetodoRegistroAdapter{
    + registrar(RegistroDTO)
}

class AdapterRegistroGoogle implements IMetodoRegistroAdapter{
    - adaptada: AdaptadaRegistroGoogle
}
class AdapterRegistroApple implements IMetodoRegistroAdapter{
    - adaptada: AdaptadaRegistroApple
}
class AdapterRegistroFacebook implements IMetodoRegistroAdapter{
    - adaptada: AdaptadaRegistroFacebook
}


interface IVerificacionGuia{
    + verificar(VerificaGuiaDTO)
}

class VerificacionIA implements IVerificacionGuia{
    - apiConcreta: AdaptadaVerificacionIA

    + verificar(VerificaGuiaDTO)
}


''No se donde poner esto por el momento :v
''Sabemos que son diferentes API para los diferentes metoods, asique seguro nos va a estar pidiendo implentar patron Adapter




''**********************************************CAPA REPOSITORIOS**********************************************

interface IRepository{
    + save(A)
    + update(A)
    + delete(long)
    + get(long)
    + find(...String) 'query?
}

class RepositoryUsuarioGuia implements IRepository{

}
RepositoryUsuarioGuia o--> UsuarioGuia

class RepositoryUsuarioTurista implements IRepository{

}
RepositoryUsuarioTurista o--> UsuarioTurista

class RepositoryContrato implements IRepository{

}
RepositoryContrato o--> Contrato

class RepositoryCiudadPais implements IRepository{

}
RepositoryCiudadPais o--> CiudadPais

class RepositoryTraduccion implements IRepository{

}
RepositoryTraduccion o--> Traduccion

class RepositoryServicioGuia implements IRepository{

}
RepositoryServicioGuia o--> ServicioGuia


class RepositoryReview implements IRepository{

}
RepositoryReview o--> Review


class RepositoryPago implements IRepository{

}
RepositoryPago o--> Pago



''**********************************************CAPA CONTROLADOR**********************************************
class ControladorContrato{
    - servicioContrato: ServicioContrato

    + contratarTourGuia(ContratoTourDTO)
    + contratarTraduccionGuia(ContratoTraduccionDTO)
    + cancelarContrato(ReservaDTO)
}
ControladorContrato *-> ServicioContrato
ControladorContrato o-> ContratoTraduccionDTO
ControladorContrato o-> ReservaDTO


'Estos metodos capas tiene mas sentido meterlos todo en un solo controlador por ejemplo: ControladorUsuarioTurista
class ControladorUsuarioGuia{
    - servicioUsuarioGuia: ServicioUsuarioGuia

    + buscarGuia(long): GuiaDTO
    + buscarGuias(FiltroDTO): List<UsuarioGuia>
}
ControladorUsuarioGuia *-> ServicioUsuarioGuia
ControladorUsuarioGuia o-> FiltroDTO
ControladorUsuarioGuia o-> UsuarioGuia
ControladorUsuarioGuia o-> GuiaDTO

''Ver si los contraladores usamos singleton
class ControladorRegistro{
    - servicioRegistro: ServicioRegistro

    + registro(RegistroDTO) ''POST
}
ControladorRegistro *-> ServicioRegistro
ControladorRegistro o-> RegistroDTO

class ControladorIA{
    ''PREGUNTAR AL PROFE!!!
    + confirmarVerificacion(EstadoVerificacionDTO)
    - enviarPush(EstadoVerificacionDTO)
    ''Cola de mensajes, no sabemos etapa de tiempo
}
ControladorIA o-> EstadoVerificacionDTO

class ControladorPago{
    - servicioPago: ServicioPago

    + pagar(PagoDTO)
}
ControladorPago *-> ServicioPago
ControladorPago o-> PagoDTO

class ControladorReview{
    - servicioReview: ServicioReview

    + obtenerReviews(): List<ReviewDTO>
    + publicarReview(ReviewDTO): ReviewDTO
    + modificarReview(long, ReviewDTO): ReviewDTO
}

ControladorReview *-> ServicioReview
ControladorReview o-> ReviewDTO


''**********************************************CAPA SERVICIOS**********************************************

class ServicioUsuarioGuia{
    - repositorioUsuarioGuia: RepositoryUsuarioGuia
}
ServicioUsuarioGuia *-> RepositoryUsuarioGuia

class ServicioRegistro{
    - repositorioUsuarioGuia: RepositoryUsuarioGuia
    - repositorioUsuarioTurista: RepositoryUsuarioTurista
    - verificacionGuia: IVerificacionGuia

    + registrarUsuarioGuia(RegistroDTO)
    + registrarUsuarioTurista(RegistroDTO)
    + verificarGuia(RegistroDTO)
}
ServicioRegistro *-> RepositoryUsuarioGuia
ServicioRegistro *-> RepositoryUsuarioTurista
ServicioRegistro o-> RegistroDTO
ServicioRegistro ..> IVerificacionGuia
ServicioRegistro ..> IMetodoRegistroAdapter



class ServicioUsuarioTurista{
    - repositorioUsuarioTurista: RepositoryUsuarioTurista

    + modificarPerfil(long, UsuarioDTO): UsuarioDTO
}
ServicioUsuarioTurista *-> RepositoryUsuarioTurista
ServicioUsuarioTurista o-> UsuarioDTO

class ServicioContrato{
    - repositorioContrato: RepositoryContrato

    + contratar(UsuarioTurista, UsuarioGuia, Servicio): ContratoDTO
    + confirmarContrato(UsuarioTurista, Contrato)
    + cancelarContrato(Contrato)
}
ServicioContrato *-> RepositoryContrato

class ServicioServicio{
    - repositorioServicio: RepositoryServicioGuia

    + agregarServicio(UsuarioGuia, ServicioDTO): ServicioDTO
}
ServicioServicio *-> RepositoryServicioGuia

class ServicioPago{
    - repositorioPago: RepositoryPago
    - sistemaPago: ISistemaPago

    + pagar(long,double, double) 
    'idUsuarioPaga, Monto, codigo de pago
    + devolver()
    + multar(long, double)
    'idUsuario, Monto
}
ServicioPago *-> RepositoryPago
ServicioPago *-> ISistemaPago

class ServicioReview{
    - repositorioReview: RepositoryReview

    + agregarReview()
    + actualizarReview()
    + eliminarReview()
}
ServicioReview *-> RepositoryReview

@enduml