@startuml TPO


''**********************************************CAPA ENTIDADES**********************************************

abstract class Usuario{
    - nombre: String
    - apellido: String
    - sexo: String
    - dni: String
    - email: String
    - numTelefono: String
    - imgPerfil: String
    ''Nombre del archivo, planificar ubicar la imagen en un servidor publico'
}

class UsuarioGuia extends Usuario{
    - listaCiudadActivo: Set<CiudadPais>
    - listaServicios: Set<ServicioGuia>

    + agregarServicio(ServicioGuia)
    + eliminarServicio(ServicioGuia)
}
UsuarioGuia *--> ServicioGuia
UsuarioGuia o-> CiudadPais

class UsuarioTurista extends Usuario{
}

abstract class ServicioGuia{
    - precio: double
    ''ver como aplica en las traducciones, si cobra tarifa por hora/dia/archivo/precio base
    - nombre: String
    - descripcion: String
}

abstract class Tour extends ServicioGuia{
    - ciudad: Ciudad
}

class TourIndividual extends Tour{}

class TourGrupal extends Tour{
    - cantPersonas: int
}

class Traduccion extends ServicioGuia{
    - idiomaOriginal: Idioma
    - idiomaDestino: Idioma
}
Traduccion o-> Idioma


class CiudadPais{
    - id: long
    - ciudad: String
    - pais: String
}


class Contrato{
    - servicio: Servicio
    - usuarioContratante: UsuarioTurista
    - usuarioContratado: UsuarioGuia
    - fechaIni: Date
    - fechaFin: Date
    - importe: Double
    - estado: IStateContrato


    - cambiarEstado(IStateContrato)
}
Contrato o-> IStateContrato

class Review{
    - usuarioTurista: UsuarioTurista
    - usuarioGuia: UsuarioGuia
    - servicioContratado: ServicioGuia
    - calificacion: int 
    ''del 1 al 10
    - comentario: String
}
Review *-> UsuarioTurista
Review *-> UsuarioGuia
Review *-> ServicioGuia

interface INotificacion{
    + notificar(UsuarioDestino, mensaje)
}

interface ISistemaPago{
    + cobrar()
    + transferir()
    + depositar()
}
interface IStateContrato{
    + pagar(Contrato)
    + cancelar(Contrato)
    + aprobar(Contrato)
    + realizarReserva(Contrato)
}

class StateContratoReserva implements IStateContrato{}
class StateContratoAceptado implements IStateContrato{}
class StateContratoConcluido implements IStateContrato{}
class StateContratoCancelado implements IStateContrato{}
StateContratoReserva ..> StateContratoCancelado
StateContratoReserva ..> StateContratoAceptado
StateContratoAceptado ..> StateContratoConcluido
StateContratoAceptado ..> StateContratoCancelado


class Pago{

    - id: long
    - monto: double
    - estado: String
}

''**********************************************CAPA ENUMS**********************************************

enum Idioma{
    ESPANOL
    INGLES
    FRANCES
    ITALIANO
    ALEMAN
    GUARANI
    ETC...
}

enum TipoUsuario{
    GUIA
    TURISTA
}


''**********************************************CAPA DTO**********************************************

class EstadoVerificacionDTO{
    - email: String
    - estado: Boolean
}

class RegistroDTO{
    - email: String
    - passwd: String
    - apiServicio: String
    - tipoUsuario: TipoUsuario
    - acreditacion: String
    - imgCredencial: String
    - nombre: String
    - apellido: String
    - sexo: String
    - dni: String
    - email: String
    - numTelefono: String
    ''Incluir foto de perfil? O se plantea para actualizarse una vez registrado?
}
RegistroDTO .. TipoUsuario

class FiltroDTO{
    - paisCiudad: List<CiudadPais>
    - nombre: String
    - apellido: String
    - idiomas: List<Idioma>R
    - servicios: List<Servicio>
    - puntacion: int
}

ServicioRegistro *-> IVerificacionGuiaAdapter
ControladorRegistro *-> ServicioRegistro
ServicioRegistro ..> EstrategiaRegistro

enum EstrategiaRegistro {
    GOOGLE
    APPLE
    FACEBOOK
    + obtenerEstrategia(): IMetodoRegistroEstrategy
}

interface IMetodoRegistroEstrategy{
    + registrar(Usuario): void 
}

class RegistroGoogleEstrategy implements IMetodoRegistroEstrategy{
    - adaptada: AdaptadaRegistroGoogle
    + registrar(Usuario): void 
}
class RegistroAppleEstrategy implements IMetodoRegistroEstrategy{
    - adaptada: AdaptadaRegistroApple
    + registrar(Usuario): void 
}
class RegistroFacebookEstrategy implements IMetodoRegistroEstrategy{
    - adaptada: AdaptadaRegistroFacebook
    + registrar(Usuario): void 
}

IMetodoRegistroEstrategy ..> Usuario

ControladorRegistro o--> RegistroDTO


interface IVerificacionGuiaAdapter{
    + verificar(VerificarGuiaDTO): void
}

class VerificacionIA implements IVerificacionGuiaAdapter{
    - apiConcreta: AdaptadaVerificacionIA

    + verificar(VerificarGuiaDTO)
}

class VerificarGuiaDTO {
    - dni: String
    - email: String
    - acreditacion: String
    - imgCredencial: String
}

''No se donde poner esto por el momento :v
''Sabemos que son diferentes API para los diferentes metoods, asique seguro nos va a estar pidiendo implentar patron Adapter



StateContratoReserva ..> StateContratoCancelado
StateContratoReserva ..> StateContratoAceptado
StateContratoAceptado ..> StateContratoConcluido
StateContratoAceptado ..> StateContratoCancelado
IVerificacionGuiaAdapter ..> VerificarGuiaDTO

''**********************************************CAPA REPOSITORIOS**********************************************

interface IRepository{
    + save(A)
    + update(A)
    + delete(long)
    + get(long)
    + find(...String) 'query?
}

class RepositoryUsuarioGuia{

}
RepositoryUsuarioGuia o--> UsuarioGuia

class RepositoryUsuarioTurista {

}
RepositoryUsuarioTurista o--> UsuarioTurista

class RepositoryContrato {

}
RepositoryContrato o--> Contrato

class RepositoryCiudadPais {

}
RepositoryCiudadPais o--> CiudadPais

class RepositoryTraduccion {

}
RepositoryTraduccion o--> Traduccion

class RepositoryServicioGuia {

}
RepositoryServicioGuia o--> ServicioGuia


class RepositoryReview {

}
RepositoryReview o--> Review


class RepositoryPago {

}
RepositoryPago o--> Pago



''**********************************************CAPA CONTROLADOR**********************************************
class ControladorContrato{
    - servicioContrato: ServicioContrato

    + contratarTourGuia(ContratoTourDTO)
    + contratarTraduccionGuia(ContratoTraduccionDTO)
    + cancelarContrato(ReservaDTO)
}
ControladorContrato *-> ServicioContrato
ControladorContrato o-> ContratoTraduccionDTO
ControladorContrato o-> ReservaDTO


'Estos metodos capas tiene mas sentido meterlos todo en un solo controlador por ejemplo: ControladorUsuarioTurista
class ControladorUsuarioGuia{
    - servicioUsuarioGuia: ServicioUsuarioGuia

    + buscarGuia(long): GuiaDTO
    + buscarGuias(FiltroDTO): List<UsuarioGuia>
}
ControladorUsuarioGuia *-> ServicioUsuarioGuia
ControladorUsuarioGuia o-> FiltroDTO
ControladorUsuarioGuia o-> UsuarioGuia
ControladorUsuarioGuia o-> GuiaDTO

class ControladorRegistro{
    - servicioRegistro: ServicioRegistro

    + registro(RegistroDTO) ''POST
}

class ControladorIA{
    ''PREGUNTAR AL PROFE!!!
    + confirmarVerificacion(EstadoVerificacionDTO)
    - enviarPush(EstadoVerificacionDTO)
    ''Cola de mensajes, no sabemos etapa de tiempo
}
ControladorIA o-> EstadoVerificacionDTO

class ControladorPago{
    - servicioPago: ServicioPago

    + pagar(PagoDTO)
}
ControladorPago *-> ServicioPago
ControladorPago o-> PagoDTO

class ControladorReview{
    - servicioReview: ServicioReview

    + obtenerReviews(): List<ReviewDTO>
    + publicarReview(ReviewDTO): ReviewDTO
    + modificarReview(long, ReviewDTO): ReviewDTO
}

ControladorReview *-> ServicioReview
ControladorReview o-> ReviewDTO

''**********************************************CAPA SERVICIOS**********************************************
class ServicioRegistro{
    - verificacionGuia: IVerificacionGuiaAdapter

    + registrar(RegistroDTO): void
    - verificarGuia(RegistroDTO): void
}

class ServicioUsuarioGuia{
    - repositorioUsuarioGuia: RepositoryUsuarioGuia
}
ServicioUsuarioGuia *-> RepositoryUsuarioGuia

class ServicioRegistro{
    - repositorioUsuarioGuia: RepositoryUsuarioGuia
    - repositorioUsuarioTurista: RepositoryUsuarioTurista
    - verificacionGuia: IVerificacionGuiaAdapter

    + registrarUsuarioGuia(RegistroDTO)
    + registrarUsuarioTurista(RegistroDTO)
    + verificarGuia(RegistroDTO)
}
ServicioRegistro *-> RepositoryUsuarioGuia
ServicioRegistro *-> RepositoryUsuarioTurista
ServicioRegistro ..> RegistroDTO
ServicioRegistro ..> IMetodoRegistroEstrategy



class ServicioUsuarioTurista{
    - repositorioUsuarioTurista: RepositoryUsuarioTurista

    + modificarPerfil(long, UsuarioDTO): UsuarioDTO
}
ServicioUsuarioTurista *-> RepositoryUsuarioTurista
ServicioUsuarioTurista o-> UsuarioDTO

class ServicioContrato{
    - repositorioContrato: RepositoryContrato

    + contratar(UsuarioTurista, UsuarioGuia, Servicio): ContratoDTO
    + confirmarContrato(UsuarioTurista, Contrato)
    + cancelarContrato(Contrato)
}
ServicioContrato *-> RepositoryContrato

class ServicioServicio{
    - repositorioServicio: RepositoryServicioGuia

    + agregarServicio(UsuarioGuia, ServicioDTO): ServicioDTO
}
ServicioServicio *-> RepositoryServicioGuia

class ServicioPago{
    - repositorioPago: RepositoryPago
    - sistemaPago: ISistemaPago

    + pagar(long,double, double) 
    'idUsuarioPaga, Monto, codigo de pago
    + devolver()
    + multar(long, double)
    'idUsuario, Monto
}
ServicioPago *-> RepositoryPago
ServicioPago *-> ISistemaPago

class ServicioReview{
    - repositorioReview: RepositoryReview

    + agregarReview()
    + actualizarReview()
    + eliminarReview()
}
ServicioReview *-> RepositoryReview

@enduml